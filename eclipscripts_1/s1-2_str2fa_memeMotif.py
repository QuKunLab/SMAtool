#!/usr/bin/python
#
import os,sys
from optparse import OptionParser
import numpy
import pandas
#
opts = OptionParser()
usage = "run s1\nusage:%prog -n protein's name -i domain structure file -a alphabet of domain structure  -o output folder -e number of extending -w widthof domain motif"
opts=OptionParser(usage=usage)
opts.add_option("-n", help="RBP's name")
opts.add_option("-e", help="number to extend of central position")
opts.add_option("-w", help="domain motif width for meme searching")
opts.add_option("-i", help="structure annotation file generated by getstructure")
opts.add_option("-a", help="alphabet of structure annotations(s,h,i,m)")
opts.add_option("-o", help="output file location")
options,arguments=opts.parse_args()
#
nmax_site = 3000
length = int(options.e)*2 + 5
max_len = int(options.e)*2 + 5
start, end = (max_len - length) / 2, length + (max_len - length) / 2
#
protein_name = options.n
domain_file =options.i
alphabet=options.a
domain_dir = options.o
#print domain_files
#
def stru2fasta(): 
    with open(domain_file) as domain:
        name, seq, loop, pvalue = [], [], [], []
        for line in domain:
            words = line.split('\t')
            name.append(words[0] + '_' + words[1])
            seq.append(words[2])
            loop.append(words[3])
            pvalue.append(float(words[-1][:-1]))
    name, seq, loop, pvalue = numpy.asarray(name), numpy.asarray(seq), numpy.asarray(loop), numpy.asarray(pvalue)
    if len(pvalue) > nmax_site :
        pvalue_sort_index = numpy.argsort(pvalue)[::-1]
        name, seq = name[pvalue_sort_index[:nmax_site]], seq[pvalue_sort_index[:nmax_site]]
        loop, pvalue = loop[pvalue_sort_index[:nmax_site]], pvalue[pvalue_sort_index[:nmax_site]]
#
    seq_fasta = domain_dir + "/" + protein_name + '_seq.fasta'
    domain_fasta = domain_dir + "/" + protein_name + '_domain.fasta'
    with open(seq_fasta, 'w') as seq_f, open(domain_fasta, 'w') as domain_f:
        for i in range(0, len(name)):
            print >> seq_f, '> ' + name[i]
            print >> seq_f, seq[i][start:end]
            print >> domain_f, '> ' + name[i]
            print >> domain_f, loop[i][start:end]
#
    matrix = numpy.append([seq], [loop], axis=0)
    matrix_df = pandas.DataFrame(matrix.T, index=name, columns=['sequence', 'structure_domain'])
    matrix_df.to_csv(domain_dir + "/" + protein_name + '_info.csv', sep='\t')
#
DomainMotif_width = options.w 
def meme_DomainMotif():
	input_file = domain_dir + "/" + protein_name + '_domain.fasta'
	output = domain_dir + "/" + protein_name
	os.popen('meme ' + input_file + ' -alph ' + alphabet + ' -oc ' + output +
        ' -time 80000 -maxsize 1000000 -mod zoops -nmotifs 5 -w ' + DomainMotif_width + ' -nostatus ')	
if __name__=="__main__":
	stru2fasta()
	meme_DomainMotif()	
